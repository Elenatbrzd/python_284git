{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(800, 800)\n",
      "False\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "625 loops, best of 3: 107 ns per loop"
      ]
     },
     "execution_count": 2,
     "metadata": {
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 1 - Run Time\n",
    "import numpy as np\n",
    "i=np.arange(100,1000,100)\n",
    "A=np.random.choice(i)\n",
    "M=random_matrix(ZZ,A,A)\n",
    "print(M.nrows(),M.ncols())\n",
    "print(M.is_singular())\n",
    "timeit('M.inverse')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(100, 100)\n",
      "1.21307373047e-07\n",
      "(200, 200)\n",
      "1.19781494141e-07\n",
      "(300, 300)\n",
      "1.2321472168e-07\n",
      "(600, 600)\n",
      "1.21688842773e-07\n",
      "('The slope and intersection of trend line is ', array([ 4.47562927e+10, -5.13780488e+03]))\n",
      "('The result of aT+b is', array([291.46341463, 223.17073171, 376.82926829, 308.53658537]))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection object at 0x7ff37b2f4490>"
      ]
     },
     "execution_count": 9,
     "metadata": {
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "execution_count": 9,
     "metadata": {
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 2 - Graph Comparing Run Time\n",
    "#Now we will get more points for the graph at least 5 points (can we right a repeat code that saves the different points and put them in graph??)\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "T=[]\n",
    "n=[]\n",
    "i=np.arange(100,1000,100)\n",
    "\n",
    "A=np.random.choice(i)\n",
    "if A not in n: \n",
    "    n.append(A) \n",
    "    M1=random_matrix(ZZ,A,A)\n",
    "    print(M1.nrows(),M1.ncols())\n",
    "    T1=timeit('M1.inverse', seconds=True) #seconds=True will give us machine readable Data\n",
    "    print(T1)\n",
    "    T.append(T1)\n",
    "\n",
    "B=np.random.choice(i)\n",
    "if B not in n:\n",
    "    n.append(B)\n",
    "    M2=random_matrix(ZZ,B,B)\n",
    "    print(M2.nrows(),M2.ncols())\n",
    "    T2=timeit('M2.inverse', seconds=True)\n",
    "    print(T2)\n",
    "    T.append(T2)\n",
    "\n",
    "C=np.random.choice(i)\n",
    "if C not in n:\n",
    "    n.append(C)\n",
    "    M3=random_matrix(ZZ,C,C)\n",
    "    print(M3.ncols(),M3.nrows())\n",
    "    T3=timeit('M3.inverse', seconds=True)\n",
    "    print(T3)\n",
    "    T.append(T3)\n",
    "\n",
    "D=np.random.choice(i)\n",
    "if D not in n:\n",
    "    n.append(D)\n",
    "    M4=random_matrix(ZZ,D,D)\n",
    "    print(M4.ncols(),M4.nrows())\n",
    "    T4=timeit('M4.inverse', seconds=True)\n",
    "    print(T4)\n",
    "    T.append(T4)\n",
    "\n",
    "E=np.random.choice(i)\n",
    "if E not in n:\n",
    "    n.append(E)\n",
    "    M5=random_matrix(ZZ,E,E)\n",
    "    print(M5.ncols(),M5.nrows())\n",
    "    T5=timeit('M5.inverse', seconds=True)\n",
    "    print(T5)\n",
    "    T.append(T5)\n",
    "\n",
    "F=np.random.choice(i)\n",
    "if F not in n:\n",
    "    n.append(F)\n",
    "    M6=random_matrix(ZZ,F,F)\n",
    "    print(M6.ncols(),M6.nrows())\n",
    "    T6=timeit('M6.inverse', seconds=True)\n",
    "    print(T6)\n",
    "    T.append(T6)\n",
    "\n",
    "G=np.random.choice(i)\n",
    "if G not in n:\n",
    "    n.append(G)\n",
    "    M7=random_matrix(ZZ,G,G)\n",
    "    print(M7.ncols(),M7.nrows())\n",
    "    T7=timeit('M7.inverse', seconds=True)\n",
    "    print(T7)\n",
    "    T.append(T7)\n",
    "\n",
    "p=np.polyfit(T,n,1)\n",
    "print(\"The slope and intersection of trend line is \", np.polyfit(T,n,1)) # calculates coefficients of quadratic equation n=aT+b\n",
    "y=np.polyval(p,T) # calculates polynomial eqaution pnx^n+...+p0x^0 /\n",
    "print(\"The result of aT+b is\", y)\n",
    "plt.plot(T,y,'m:')\n",
    "plt.scatter(T,n)\n",
    "\n",
    "\n",
    "#list_plot(np.array([[T1,A],[T2,B],[T3,C],[T4,D],[T5,E],[T6,F],[T7,G]])) one option for scatter but will use plt to combine scatter line in one graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
    "# Question 2 - Trend Description\n",
    "#Looking at the runtimes and matrices sizes dont seem to have a linear relationship as sometimes the bigger sizes have lesser runtime, and with different random matrices we see both negative and positive slope."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('number of rows and columns are', 200, 200)\n",
      "('M1 is singular', False)\n",
      "('M2 is singular', False)\n",
      "('M3 is singular', True)\n"
     ]
    },
    {
     "ename": "ZeroDivisionError",
     "evalue": "Matrix is singular",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-11-5c18431b10bf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mM4\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m \u001b[0;32mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"M4 is singular\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM4\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_singular\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM4\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/ext/sage/sage-8.9_1804/local/lib/python2.7/site-packages/sage/matrix/matrix2.pyx\u001b[0m in \u001b[0;36msage.matrix.matrix2.Matrix.inverse (build/cythonized/sage/matrix/matrix2.c:66883)\u001b[0;34m()\u001b[0m\n\u001b[1;32m   8925\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8926\u001b[0m         \"\"\"\n\u001b[0;32m-> 8927\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;34m~\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   8928\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8929\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0madjugate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/ext/sage/sage-8.9_1804/local/lib/python2.7/site-packages/sage/matrix/matrix_integer_dense.pyx\u001b[0m in \u001b[0;36msage.matrix.matrix_integer_dense.Matrix_integer_dense.__invert__ (build/cythonized/sage/matrix/matrix_integer_dense.c:33100)\u001b[0;34m()\u001b[0m\n\u001b[1;32m   4108\u001b[0m             \u001b[0mZeroDivisionError\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mMatrix\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0msingular\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4109\u001b[0m         \"\"\"\n\u001b[0;32m-> 4110\u001b[0;31m         \u001b[0mA\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0md\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_invert_flint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4111\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mA\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4112\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/ext/sage/sage-8.9_1804/local/lib/python2.7/site-packages/sage/matrix/matrix_integer_dense.pyx\u001b[0m in \u001b[0;36msage.matrix.matrix_integer_dense.Matrix_integer_dense._invert_flint (build/cythonized/sage/matrix/matrix_integer_dense.c:32939)\u001b[0;34m()\u001b[0m\n\u001b[1;32m   4069\u001b[0m         \u001b[0mfmpz_clear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfden\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4070\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mres\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4071\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mZeroDivisionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Matrix is singular'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4072\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mden\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4073\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0mM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0mden\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mZeroDivisionError\u001b[0m: Matrix is singular"
     ]
    }
   ],
   "source": [
    "# Challange Problem\n",
    "import numpy as np\n",
    "i=np.arange(100,1000,100)\n",
    "A=np.random.choice(i)\n",
    "\n",
    "M1=random_matrix(ZZ,A,A)\n",
    "print(\"number of rows and columns are\",M1.nrows(),M1.ncols())\n",
    "print(\"M1 is singular\", M1.is_singular())\n",
    "\n",
    "M2=matrix.identity(A)\n",
    "print(\"M2 is singular\", M2.is_singular())\n",
    "\n",
    "M3= matrix(QQ, A, A, lambda i, j: i+j)\n",
    "print(\"M3 is singular\", M3.is_singular())\n",
    "\n",
    "M4=matrix.zero(A)\n",
    "print(\"M4 is singular\", M4.is_singular())\n",
    "\n",
    "#for non-singular matrices\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "T=[]\n",
    "n=[]\n",
    "i=np.arange(100,1000,100)\n",
    "\n",
    "A=np.random.choice(i)\n",
    "if A not in n:\n",
    "    n.append(A)\n",
    "    M1=matrix.identity(A)\n",
    "    print(M1.nrows(),M1.ncols())\n",
    "    T1=timeit('M1.inverse', seconds=True)\n",
    "    print(T1)\n",
    "    T.append(T1)\n",
    "\n",
    "B=np.random.choice(i)\n",
    "if B not in n:\n",
    "    n.append(B)\n",
    "    M2=matrix.identity(B)\n",
    "    print(M2.nrows(),M2.ncols())\n",
    "    T2=timeit('M2.inverse', seconds=True)\n",
    "    print(T2)\n",
    "    T.append(T2)\n",
    "\n",
    "C=np.random.choice(i)\n",
    "if C not in n:\n",
    "    n.append(C)\n",
    "    M3=matrix.identity(C)\n",
    "    print(M3.ncols(),M3.nrows())\n",
    "    T3=timeit('M3.inverse', seconds=True)\n",
    "    print(T3)\n",
    "    T.append(T3)\n",
    "\n",
    "D=np.random.choice(i)\n",
    "if D not in n:\n",
    "    n.append(D)\n",
    "    M4=matrix.identity(D)\n",
    "    print(M4.ncols(),M4.nrows())\n",
    "    T4=timeit('M4.inverse', seconds=True)\n",
    "    print(T4)\n",
    "    T.append(T4)\n",
    "\n",
    "E=np.random.choice(i)\n",
    "if E not in n:\n",
    "    n.append(E)\n",
    "    M5=matrix.identity(E)\n",
    "    print(M5.ncols(),M5.nrows())\n",
    "    T5=timeit('M5.inverse', seconds=True)\n",
    "    print(T5)\n",
    "    T.append(T5)\n",
    "\n",
    "F=np.random.choice(i)\n",
    "if F not in n:\n",
    "    n.append(F)\n",
    "    M6=matrix.identity(F)\n",
    "    print(M6.ncols(),M6.nrows())\n",
    "    T6=timeit('M6.inverse', seconds=True)\n",
    "    print(T6)\n",
    "    T.append(T6)\n",
    "\n",
    "G=np.random.choice(i)\n",
    "if G not in n:\n",
    "    n.append(G)\n",
    "    M7=matrix.identity(ZG)\n",
    "    print(M7.ncols(),M7.nrows())\n",
    "    T7=timeit('M7.inverse', seconds=True)\n",
    "    print(T7)\n",
    "    T.append(T7)\n",
    "\n",
    "p=np.polyfit(T,n,1)\n",
    "print(\"The slope and intersection of trend line is \", np.polyfit(T,n,1)) # calculates coefficients of quadratic equation n=aT+b\n",
    "y=np.polyval(p,T) # calculates polynomial eqaution pnx^n+...+p0x^0 /\n",
    "print(\"The result of aT+b is\", y)\n",
    "plt.plot(T,y,'m:')\n",
    "plt.scatter(T,n)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
    "# Question 3 - Linear Transfromatiion \n",
    "#if a matrix is singular/ not invertible :\n",
    "# 1- It can not be multiplied by any other matrix to get the identity matrix/ not invetible- matrix multiply by its inverse=identity matrix\n",
    "# 2- Singular matrix determinant is zero.\n",
    "# 3- Since its not invertible means not all rows or columns are linearly independent\n",
    "# 4- The rank is less than min of rows/coumns whichever is minimum \n",
    "# 5- Nullity of a matrix= order of a matrix - rank of a matrix hence the nullity of singlar matrix is not zero unlike non-singular\n",
    "# 6- The rows does not span R^number of columns since columns are not linearly independent\n",
    "# 7- eigenvalue is zero\n",
    "# 8- kernel of a transformation has basis matrix set of the elements of the domain that become zero when transformed under T."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('vector v is', (4, 3), 'and its transformation under T is ', (10, -10))\n",
      "Vector space of degree 2 and dimension 1 over Rational Field\n",
      "Basis matrix:\n",
      "[   1 -1/2]\n",
      "((2, -1), (0, 0))\n",
      "((6, -3), (0, 0))\n",
      "((0, 0), (0, 0))\n",
      "((5, -5/2), (0, 0))\n",
      "((5, -5/2), (0, 0))\n",
      "((16, -8), (0, 0))\n",
      "((3, -3/2), (0, 0))\n",
      "((13, -13/2), (0, 0))\n",
      "((15, -15/2), (0, 0))\n",
      "((18, -9), (0, 0))\n",
      "((7, -7/2), (0, 0))\n",
      "((17, -17/2), (0, 0))\n",
      "((2, -1), (0, 0))\n",
      "((17, -17/2), (0, 0))\n",
      "((9, -9/2), (0, 0))\n",
      "((18, -9), (0, 0))\n",
      "((2, -1), (0, 0))\n",
      "((17, -17/2), (0, 0))\n",
      "((8, -4), (0, 0))\n",
      "((19, -19/2), (0, 0))\n"
     ]
    }
   ],
   "source": [
    "# Question 4 - Linear Transformation\n",
    "\n",
    "# command for T=Ax(x,y)\n",
    "import numpy as np\n",
    "x,y=var('x, y')\n",
    "output=[x+2*y,-1*x-2*y]\n",
    "T_symbolic(x,y)=output\n",
    "T=linear_transformation(QQ^2,QQ^2,T_symbolic)\n",
    "\n",
    "i=np.arange(1,10,1)\n",
    "V=vector(QQ,[np.random.choice(i), np.random.choice(i)])\n",
    "T_V=T(V)\n",
    "print(\"vector v is\",V,\"and its transformation under T is \",T(V))\n",
    "print(T.kernel())\n",
    "\n",
    "#any scalar multiplication of the kernel of T will set to 0 under T/H={c*[1,-1/2] for c in R}\n",
    "for i in range(20):\n",
    "    j=np.arange(0,20,1)\n",
    "    c=np.random.choice(j)\n",
    "    H=vector(QQ,[c*1,c*(-1/2)])\n",
    "    print(H,T(H))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Vector space of degree 2 and dimension 0 over Rational Field\n",
      "Basis matrix:\n",
      "[]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "Graphics object consisting of 2 graphics primitives"
      ]
     },
     "execution_count": 12,
     "metadata": {
     },
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "# Question 5 - Image of transformation\n",
    "import numpy as np\n",
    "x,y=var('x,y')\n",
    "outputs= [x+2*y,-1*x+2*y]\n",
    "T_symbolic(x,y)= outputs\n",
    "T=linear_transformation(QQ^2,QQ^2, T_symbolic)\n",
    "print(T.kernel())\n",
    "\n",
    "M=matrix(QQ,[[1,2],[-1,2]])\n",
    "unit_square = list([vector([-1,-1]),vector([1,-1]),vector([1,1]),vector([-1,1])])\n",
    "unit_square_transformation = [ M * i for i in unit_square]\n",
    "P = polygon(unit_square) + sage.plot.scatter_plot.scatter_plot(unit_square_transformation)\n",
    "P.set_aspect_ratio(1)\n",
    "show(P)\n",
    "print(M.rank())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
    "# There is no matrix basis for this transformation kernel. The reason is the matrix is full rank meaning all the rows and columns are linearly independent.\n",
    "# The equation Ax = 0 has only the trivial solution x = 0. The kernel of A is trivial, that is, it contains only the null vector as an element, ker(A) = {0}.\n",
    "# The points are unit square transformation under matrix A. \n",
    "# image of T:\n",
    "# 1- Im(T) is the span of linearly independent columns.\n",
    "# 2- Let  T:V→W  be a linear transformation where  V,W  are vector spaces. Suppose the dimension of  V  is  n . Then  n=dim(ker(T))+dim(im(T)) .\n",
    "# 3- For any matrix dim(Im(A))=rank of A so the im(T) is R^2.\n",
    "# 4- if T is a linear transformation from R^2 to R^2 with 2*2 matrix A then A.rank + nullity of A(dimention of A.kernel)= dim(im A)+ dim(kernel A)= number of columns. Here rank of A is 2 + nullity is zero = dim of im(A) which is 2 + 0=2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Vector space of degree 2 and dimension 0 over Rational Field\n",
      "Basis matrix:\n",
      "[]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "execution_count": 2,
     "metadata": {
     },
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "# Question 5 - Honor \n",
    "# A linear transformation under matrix A takes unit circle onto an ecllipse. \n",
    "# unit circle x^2+y^2=1  hence y=+ and - sqrt(1-x^2)\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "x,y=var('x,y')\n",
    "outputs= [x+2*y,-1*x+2*y]\n",
    "T_symbolic(x,y)= outputs\n",
    "T=linear_transformation(QQ^2,QQ^2, T_symbolic)\n",
    "print(T.kernel())\n",
    "\n",
    "# M.[x,y] unit circle = [x+2y,-x+2y]\n",
    "M=matrix(QQ,[[1,2],[-1,2]])\n",
    "x=np.linspace(-1,1,100000)\n",
    "y=np.sqrt(1-x^2)\n",
    "x1=np.linspace(-1,1,100000)\n",
    "y1=np.sqrt((1-x^2)/4)\n",
    "plt.plot(x,y,sns.color_palette(\"Blues_d\").as_hex()[0]) #don't understand as.hex_()[0]\n",
    "plt.plot(x,-y,sns.color_palette(\"Blues_d\").as_hex()[0])\n",
    "plt.xlim(-1.5,1.5)\n",
    "plt.ylim(-1.5,1.5)\n",
    "plt.plot(x1,y1,sns.color_palette(\"RdBu\").as_hex()[0])\n",
    "plt.plot(x1,-1*y1,sns.color_palette(\"RdBu\").as_hex()[0])\n",
    "plt.show()\n",
    "\n",
    "print(M.rank())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SageMath (default)",
   "language": "sagemath",
   "metadata": {
    "cocalc": {
     "description": "Open-source mathematical software system",
     "priority": 10,
     "url": "https://www.sagemath.org/"
    }
   },
   "name": "sagemath"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
